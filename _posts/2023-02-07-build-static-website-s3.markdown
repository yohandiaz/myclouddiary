---
layout: post
title:  "Building and deploying a static website using Amazon S3, Jekyll, Route 53 and CloudFront"
date:   2023-02-07 01:34:38 +0000
categories: AWS S3 ROUTE53 CLOUDFRONT JEKYLL WEBAPP
---

# Building and deploying a static website using Amazon S3, Jekyll, Route 53 and CloudFront

## Introduction:

Welcome to our cloud blog, where we explore the latest developments and innovations in cloud computing. In today's article, we will be discussing how to build and deploy a static website using some of Amazon Web Services' (AWS) most popular services - Amazon S3, Jekyll, Route 53, and CloudFront.

Static websites are an excellent choice for a variety of use cases, such as personal blogs, online portfolios, or corporate landing pages. They are simple to develop, inexpensive to host, and can handle high levels of traffic without performance issues. With AWS, building and deploying a static website can be even more straightforward, thanks to the tools and services they offer.

In this article, we will walk you through the process of creating a static website using Jekyll, a popular static site generator, and deploying it using AWS services, such as Amazon S3 for hosting, Route 53 for DNS management, and CloudFront for content delivery. We will cover everything you need to know, from creating your website, to configuring your domain name, to setting up a secure and scalable infrastructure to host and deliver your website to visitors.

Whether you're a web developer, a content creator, or an AWS enthusiast, understanding how to build and deploy a static website using AWS services can be a valuable addition to your skillset. So, let's dive in and explore this topic in more detail, and discover how AWS can help you create and deploy static websites more efficiently and effectively.

## Technologies description:

**Jekyll:** Used to generate a static website from your source files. This generates HTML, CSS, and JavaScript files that can be served by a web server.

**Amazon S3:** Used to store the static files generated by Jekyll. This allows you to store the website files in the cloud, making them accessible from anywhere with an internet connection.

**Route 53:** Amazon Route 53 is a domain name system (DNS) service that maps a domain name to an IP address. This is used to associate your domain name with your S3 bucket, so that when a user enters your domain name in their web browser, they are directed to the correct S3 bucket.

**CloudFront:** Amazon CloudFront is a content delivery network (CDN) that caches content in multiple locations around the world. This helps to reduce latency and improve the delivery speed of your website to users, no matter where they are located. This service will also give us the possibility to use the SSL certificate for our website in order to be HTTPS.

## Architecture:

The web application follows the next architecture:

![Alt text](https://myclouddiary.s3.amazonaws.com/assets/architectures/StaticWebsite.png "Architecture")

The process of a request for this architecture typically works as follows:

**1.** A user enters your domain name into their web browser.
<br> **2.** Route 53 resolves the domain name to an IP address and directs the request to the corresponding CloudFront distribution.
<br> **3.** CloudFront checks its cache to see if it has a copy of the requested content. If it does, it serves the content directly from the cache. If it does not, it forwards the request to the S3 bucket.
<br> **4.** The S3 bucket returns the requested content to CloudFront.
<br> **5.** CloudFront caches the content and serves it to the user.
<br> **6.** The user's web browser displays the website, powered by the HTML, CSS, and JavaScript files generated by Jekyll and stored in the S3 bucket.

This architecture provides a scalable and highly available solution for serving your website to users, regardless of their location.

## Pre-requisites:

I will be using the OS Ubuntu 22.04 LTS for this project but it can be followed in nearly the most common Operating Systems distributions such as Windows, Mac OS, and the different distros of Linux.

- Jekyll installed     <a href="https://jekyllrb.com/docs/installation/" target="_blank">Installation Guide</a>
- Git installed     <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank">Installation Guide</a>
- An AWS Account with AWS CLI set up <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html" target="_blank">Configuration Guide</a>

## Guide:

### Generating the static website files using Jekyll

We will use in this case the theme Serial Programmer, for that we clone the repository

```sh
git clone https://github.com/sharadcodes/jekyll-theme-serial-programmer.git
```

Then we go into the folder cloned

```sh
cd jekyll-theme-serial-programmer
```

After this, to install all the dependencies needed by our theme we will run the next command:

```sh
bundle install
```

Then we serve the Jekyll server to build the website files

```sh
bundle exec jekyll serve
```

We change the _config.yml & _data/author.yml files to customize our website.

Deploy Jekyll files to Amazon S3:

First we create the bucket that we will use for the site, it's very important to name the bucket with the same name as your website.

```sh
aws s3 mb s3://myclouddiary.com
```

We have to make the bucket public in order for it to be accessible from anywhere.

For this we will create the next json file on our system

```sh
touch policy.json

policy.json:
{
   "Statement": [
      {
         "Effect": "Allow",
         "Principal": "*",
         "Action": "s3:GetObject",
         "Resource": "arn:aws:s3:::myclouddiary.com/*"
      }
   ]
}
```

Then we make the bucket public with the next command:

```sh
aws s3api put-bucket-policy --bucket MyBucket --policy file://policy.json
```

Next we upload the files of the _site folderinto the S3 Bucket, this folder is inside the one that was generated before.

```sh
aws s3 sync _site s3://myclouddiary.com
```

Then it is necessary to enable the static website hosting, for this we will run next command

```sh
aws s3 website s3://myclouddiary.com/ --index-document index.html --error-document 404.html
```

Create another bucket with the same name but adding www. before, this is because if we don't do this we won't be able to enter the website using www. but only with the domain name, after creating the bucket we will redirect the traffic to our principal bucket, we can do this following this guide <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-page-redirect.html" target="_blank">Redirect Guide</a>

Use Amazon Route 53 to set up a custom domain and a DNS server:

First we have to register a domain, for this we will follow the next steps:

- Go to route 53 service
- Click domain registration
- Register domain
- Then follow the steps shown.

After having the domain registered we will have to wait a few hours in order for it to be available, for the moment we can set up the hosted zone.

- Go to route 53 service
- Click hosted zones
- Create hosted zone and name it the same that your domain, public hosted zone and accept.

Now we will create records in the hosted zone:

- Create record, simple routing, define simple record, value/route traffic to s3 bucket
- Choose the region of your bucket and then select it on the scroll down menu.
- Disable evaluate target health as this is normally not needed for S3 websites.
- Accept
- Create another record following the same process but with the subdomain www

After this we should be able to access our site using the domain provided.

In order to obtain the HTTPS certificate we will follow this steps:

- Go to certificate manager
- Request a certificate
- Request a public certificate, next, enter our domain with and without www.
- DNS Validation and click request.

Then we will have to proof AWS that we are the owners of this domain, for this we will go into the domain, and hit on create records on route 53, this will automatically add the records on your domain for you.

Now we will set up CloudFront

- Create a new CloudFront distribution.
- For Origin Domain we have to go to our bucket, properties, copy the website URL, and then paste it in Origin Domain
- Set viewer protocol policy to redirect HTTP to HTTPS
- Enable HTTPS for your website using an SSL certificate from Amazon Certificate Manager.
- Paste your domain in alternate domain name
- Then select your certificate in the SSL Custom certificate scroll down menu, and click create distribution
- Create another distribution with the www version of your domain and the same information that we used before.

Now we have to update your custom domain's DNS settings to point to the CloudFront distribution domain name.

- Go to route 53, then enter to our hosted zone
- Modify our A records, the ones that we created before.
- Set route traffic to, select cloudfront distribution
- Copy the domain name of our cloudfront distribution and paste it on the endpoint field
- Accept

Now wait a few minutes and enter your domain, then you should be able to see it and the website will have the HTTPS certificate.

Thanks for following this guide, keep engaged to know about more projects!
